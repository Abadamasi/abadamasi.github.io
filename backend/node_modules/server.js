const express = require('express');
const bodyParser = require('body-parser');
const cors = require('cors');
const mongoose = require('mongoose');

// Initialize Express app
const app = express();
app.use(bodyParser.json());
app.use(cors());

// Connect to MongoDB (replace with your connection string)
mongoose.connect('mongodb://localhost:27017/travelwebsite', { useNewUrlParser: true, useUnifiedTopology: true });

// Define routes here

// Start server
const PORT = process.env.PORT || 5000;
app.listen(PORT, () => {
    console.log(`Server is running on port ${PORT}`);
});

// Booking 

const Booking = require('./models/Booking');

// Route to book tickets
app.post('/api/bookings', async (req, res) => {
    const { user, flightId, seats } = req.body;
    try {
        const booking = new Booking({ user, flightId, seats });
        await booking.save();
        res.status(201).json(booking);
    } catch (error) {
        res.status(500).json({ error: error.message });
    }
});

// Route to get all bookings
app.get('/api/bookings', async (req, res) => {
    try {
        const bookings = await Booking.find();
        res.status(200).json(bookings);
    } catch (error) {
        res.status(500).json({ error: error.message });
    }
});

// Cancelling Tickets

// Route to cancel a booking
app.delete('/api/bookings/:id', async (req, res) => {
    try {
        const { id } = req.params;
        const result = await Booking.findByIdAndDelete(id);
        if (result) {
            res.status(200).json({ message: 'Booking cancelled' });
        } else {
            res.status(404).json({ message: 'Booking not found' });
        }
    } catch (error) {
        res.status(500).json({ error: error.message });
    }
});

// Trips

const Trip = require('./models/Trip');

// Route to get all trips
app.get('/api/trips', async (req, res) => {
    try {
        const trips = await Trip.find();
        res.status(200).json(trips);
    } catch (error) {
        res.status(500).json({ error: error.message });
    }
});
